<#!
.SYNOPSIS
    Package Blender extension into dist zip using manifest id+version.
.DESCRIPTION
    Reads blender_manifest.toml to get id and version.
    Creates dist/<id>-<version>.zip excluding development artifacts.
    Safe to re-run; overwrites existing zip.
.NOTES
    Generated by automated assistant.
!#>
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

$root = Split-Path -Parent $MyInvocation.MyCommand.Path
$projectRoot = Resolve-Path (Join-Path $root '..')
Set-Location $projectRoot

$manifestPath = Join-Path $projectRoot 'blender_manifest.toml'
if (-not (Test-Path $manifestPath)) { throw "Manifest not found: $manifestPath" }

# Parse id and version from manifest (simple regex, avoids external deps)
$manifestContent = Get-Content $manifestPath -Raw
$idMatch = [regex]::Match($manifestContent, '^id\s*=\s*"([^"]+)"', 'Multiline')
$verMatch = [regex]::Match($manifestContent, '^version\s*=\s*"([^"]+)"', 'Multiline')
$id = $idMatch.Groups[1].Value
$version = $verMatch.Groups[1].Value
if (-not $id -or -not $version) { throw 'Failed to parse id or version from manifest' }

$distDir = Join-Path $projectRoot 'dist'
if (-not (Test-Path $distDir)) { New-Item -ItemType Directory -Path $distDir | Out-Null }

$zipName = "$id-$version.zip"
$zipPath = Join-Path $distDir $zipName

if (Test-Path $zipPath) { Remove-Item $zipPath -Force }

# Gather files excluding patterns
$excludes = @(
    '.git', '.vscode', '__pycache__', '.github', '.gitignore', 'README.md', 'dist', '*.zip',
)

$projectRootPath = $projectRoot.Path
$allFiles = Get-ChildItem -Recurse -File | Where-Object {
    $relative = $_.FullName.Substring($projectRootPath.Length) -replace '^[\\/]+' , ''
    foreach ($ex in $excludes) {
        if ($relative -match "(^|[\\/])$([regex]::Escape($ex))([\\/]|$)") { return $false }
    }
    return $true
}

# Use temporary staging folder for clean structure inside zip (root folder is extension id)
$stage = Join-Path $env:TEMP ("pkg_" + [Guid]::NewGuid().ToString())
New-Item -ItemType Directory -Path $stage | Out-Null
$innerRoot = Join-Path $stage $id
New-Item -ItemType Directory -Path $innerRoot | Out-Null

foreach ($f in $allFiles) {
    $rel = $f.FullName.Substring($projectRootPath.Length) -replace '^[\\/]+' , ''
    $dest = Join-Path $innerRoot $rel
    New-Item -ItemType Directory -Force -Path (Split-Path $dest -Parent) | Out-Null
    Copy-Item $f.FullName -Destination $dest -Force
}

Compress-Archive -Path (Join-Path $stage $id '*') -DestinationPath $zipPath -Force

Remove-Item $stage -Recurse -Force

Write-Host "Created $zipPath" -ForegroundColor Green
